openapi: 3.0.0
info:
  title: Swagger hello World - OpenAPI 3.0
  description: |-
    This is a sample yaml file for hello world service
  # termsOfService: http://swagger.io/terms/
  contact:
    name: Satya Prakash
    email: satyajnv805@gmail.com
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
servers:
  - url: http://127.0.0.1:9000
#the api endpoint related to one specific entity and there description and documentation
tags:
  - name: Article
    description: Everything about the article
    externalDocs:
      description: Find out more on IEEE 
      url: https://www.ieee.org/

  - name: user
    description: Operations about user
paths:
  /:
    get:
      summary :  hello world response
      description: Update an existing aricle by Id
      operationId: HelloWorld
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    "enum": [
                      "Welcome to openapi world"
                    ]
                    example: Welcome to openapi world

  /Article:
    put:
      tags:
        - Article
      summary: Update an existing paper summary
      description: Update an existing aricle by Id
      operationId: updateArticle
      requestBody:
        description: Update an existing paper summary
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    post:
      tags:
        - Article
      summary: Add a new article 
      description: Add a new article
      operationId: addArticle
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '405':
          description: Invalid input
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /Article/findByStatus:
    get:
      tags:
        - Article
      summary: Finds Articles by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findArticlesByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: NewlyAdded
            enum:
              - SummaryCreated
              - inProgress
              - NewlyAdded
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: Invalid status value
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /Article/findByTags:
    get:
      tags:
        - Article
      summary: Finds Articles by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findArticlesByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
        '400':
          description: Invalid tag value
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /Article/{articleId}:
    get:
      tags:
        - Article
      summary: Find Article by ID
      description: Returns a single Article
      operationId: getArticleById
      parameters:
        - name: articleId
          in: path
          description: ID of article to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
      # security:
      #   - api_key: []
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    post:
      tags:
        - Article
      summary: Updates a article in the store with form data
      description: ''
      operationId: updateArticleWithForm
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of article that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of article that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    delete:
      tags:
        - Article
      summary: Deletes a article
      description: delete a article
      operationId: deleteArticle
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation

  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Successfull operation
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Article
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Article:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
  requestBodies:
    Pet:
      description: Article object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Article'
        application/xml:
          schema:
            $ref: '#/components/schemas/Article'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  # securitySchemes:
  #   petstore_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: https://petstore3.swagger.io/oauth/authorize
  #         scopes:
  #           write:pets: modify pets in your account
  #           read:pets: read your pets
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header